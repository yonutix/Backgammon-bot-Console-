Algorithms design
Homework 2
Mihai Cosmin 322CC


The homework can be compiled with make build, run example: make IP="127.0.0.1 PORT="10000" run" .
The documantation can be generated with Doxygen.
After my tests the bot should beat every bot.
I used two clases: Connection, AI.
Connection is an interface between the code skeleton made available and the bot algorithm.
Basically the AI class is the homework.
In the constructor I initialize the table and I establish the connection.
In destructor I free the buffer and the link memory.
Entire algorithm is happening in the mainloop() method.
In mainloop() exists a while which finishes only when I lose or win.
At each step I read the message, I convert it so I can always play with black(I have chosen that way to move ascending,  I could also use white).
I syncronize the table with the opponent move.
I generate all the possible moves.
I filter the moves and I choose the best one based on an evaluation.
I convert the move if the opponent is black.
I send the message.



                            Iesi
                             ^
                             | Da
________________    _________|_______      ____________    ________________     ___________________    _________________
|               |   |               | Nu  |           |    |              |     |                 |    |               |
|Message income |-> | Game over     |---->|Conversion |--->| Board        |---->|possible moves   |--->| Best move     |
|_______________|   |_______________|     |___________|    |Syncronization|     |   generation    |    |   filtering   |
          ^                                                |______________|     |_________________|    |_______________|
          |
          |____________________
    _____________    __________|_______
    |           |    |                |
--->|Conversion |--->|Message sending |
    |___________|    |________________|

Between segments above, "possible moves generation" and "Best move filtering" are the most complex.
For possbile moves generation there are two possible cases: equal or unequal dices.
First I generate possible moves for a single dice. Here I take into account that the table can be in three different states:
-Pieces are in the "house"(can be eliminated)
-At least one piece taken out by the opponent (It must be moved first)
-None of above cases
Then for each move generated earlier,  I move the pieces for the first move, the history stores the move. After that I generate all the moves for the second dice,the procedure continues if the maximum number of moves is four.
For equal dices, for a perfect history implementation I should have used a stack, but for reasons of simplicity I chose 3 local arrays and not a stack of arrays.
To filter the best move I use series of functions used in getBestMove function.
I check each move and I take decisions based on the game strategy, here is not about the programming strategy anymore, but about the knowledge of the game.
I think that there are two cases: If I have "home gate" is more important that the opponent to have pieces out of the game because
there is a small possibility to take them back in the game, otherwise is important to have as much as possible "covered" pieces.
After that I calculate the maximum of covered pieces, if there are several moves with the same "covered" pieces I choose the maximum score.
I calculate the score like this: If there are no pieces that can be attacked the cover is not a priority anymore, just the score.
If the white player has "house gate" I try to make my "house gate" , thus is more important to move the advanced pieces, otherwise
I move them homogeneous.

